FROM nvidia/cuda:8.0-cudnn5-runtime-ubuntu14.04
## Docker Installation of TensorFlow 1.3 with GPU [Ubuntu 14.04 + CUDA 8.0 + cuDNN] ##
MAINTAINER @deanofthewebb

## 43. Expose Ports ##
# TensorBoard
EXPOSE 6006
# Jupyter
EXPOSE 8888-9000
# Flask Server
EXPOSE 4567
# Docker
EXPOSE 3470-3500
# Docker
EXPOSE 2376
# Web
EXPOSE 80
EXPOSE 443

## Docker Working Directory ##
WORKDIR "/opt"

### PART 1. Install Dependencies ###
ENV WORKDIR "/opt"

RUN apt update && apt -y upgrade

## 1. Install Prompt Interaction Tool ##
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update && \
    apt-get install debconf-utils && \
    echo debconf shared/accepted-oracle-license-v1-1 select true | \
    debconf-set-selections && \
    echo debconf shared/accepted-oracle-license-v1-1 seen true | \
    debconf-set-selections

## 2. Install APT-GET PACKAGES ##
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        vim \
        curl \
        libcurl3-dev \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        pciutils \
        build-essential \
        swig \
        gzip \
        python \
        python3 \
        python-numpy \
        python3-numpy \
        python-dev \
        python3-dev \
        python-pip \
        python3-pip \
        python-virtualenv \
        python-wheel \
        rsync \
        software-properties-common \
        git \
        unzip \
        libgtk2.0-0 \
  tcl-dev \
  tk-dev \
        && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/

## Install Docker ##
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

## Install for HTTPS - The method driver /usr/lib/apt/methods/https could not be found.##
RUN sh -c "apt-get update && \
        apt-get install -y -q -o \
        Dpkg::Options::='--force-confdef' -o \
        Dpkg::Options::='--force-confold' \
    apt-transport-https"


## Add Docker Repository ##
RUN add-apt-repository \
       "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
       $(lsb_release -cs) \
       stable" && \
       apt-get update

## Install Docker CE ##
 RUN sh -c "apt-get update && \
         apt-get install -y -q -o \
         Dpkg::Options::='--force-confdef' -o \
         Dpkg::Options::='--force-confold' \
     docker-ce"


## Install Nvidia Drivers (If not Installed) ##
RUN add-apt-repository ppa:graphics-drivers/ppa && \
    apt update


RUN sh -c "apt update && \
        apt install -y -q -o \
        Dpkg::Options::='--force-confdef' -o \
        Dpkg::Options::='--force-confold' \
    nvidia-375"



## 12. Verify Nvidia installed ##
RUN lspci | grep -i nvidia

## 13. Install Linux Headers for Nvidia ##
RUN sh -c "apt-get update && \
        apt-get install -y -q -o \
        Dpkg::Options::='--force-confdef' -o \
        Dpkg::Options::='--force-confold' \
    linux-headers-$(uname -r)"

## 15. Set up Jupyter Notebook config. ##
COPY docker_files/jupyter_notebook_config.py /root/.jupyter/

## Install wget ##
RUN apt-get update && \
apt-get install -y -q -o \
Dpkg::Options::="--force-confdef" -o \
Dpkg::Options::="--force-confold" \
wget

## 16. Install EXTRA NVIDIA CUDA DRIVERS FOR GPU ##
RUN mkdir -p $WORKDIR/tmp/cuda-repo && \
    wget -P $WORKDIR/tmp/cuda-repo/ \
    https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb && \
    dpkg -i $WORKDIR/tmp/cuda-repo/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb && \
    apt-get update && \
    apt-get install -y -q -o \
    Dpkg::Options::="--force-confdef" -o \
    Dpkg::Options::="--force-confold" \
    cuda && \
    apt-get install -y -q -o \
    Dpkg::Options::="--force-confdef" -o \
    Dpkg::Options::="--force-confold" \
    cuda-drivers


RUN mkdir -p $WORKDIR/tmp/nvidia-docker && \
    # Update this to new package
    curl -o $WORKDIR/tmp/nvidia-docker_1.0.1-1_amd64.deb \
    https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.1/nvidia-docker_1.0.1-1_amd64.deb && \
    dpkg -i $WORKDIR/tmp/nvidia-docker/nvidia-docker_1.0.1-1_amd64.deb && \
    rm nvidia-docker*.deb

## Test nvidia-smi
RUN nvidia-docker run --rm nvidia/cuda nvidia-smi


## 44. TF-GPU Working Directory ##
RUN mkdir -p /src
WORKDIR "/src/"

## 45. Two Birds, One Stone Implementation ##
## 1. sources conda environment ##
## 2. prevents the zombie container issue when started as pid 1 ##
COPY docker_files/run.sh /

## 46. Run Entrypoint Script ##
RUN chmod +x /run.sh
RUN chmod +x /src
ENTRYPOINT ["/run.sh"]
